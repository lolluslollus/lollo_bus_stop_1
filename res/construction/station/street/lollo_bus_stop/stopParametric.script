local arrayUtils = require('lollo_bus_stop.arrayUtils')
local constants = require('lollo_bus_stop.constants')
local logger = require('lollo_bus_stop.logger')
local moduleHelpers = require('lollo_bus_stop.moduleHelpers')
local transfUtils = require('lollo_bus_stop.transfUtils')
local transfUtilsUG = require('transf')

function data()
	return {
		updateFn = function(params, two)
			logger.print('stopParametric.updateFn.script() starting, params =') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}))
			-- no api, no game, and I cannot pass the api as a param

			local function _getInverseTan(tan)
				return {-tan[1], -tan[2], -tan[3]}
			end
			local function getSnapNodes()
				if params.lolloBusStop_direction == 0 then
					if params.lolloBusStop_snapNodes == 0 then return {}
					elseif params.lolloBusStop_snapNodes == 1 then return { 0, }
					elseif params.lolloBusStop_snapNodes == 2 then return { 5, }
					elseif params.lolloBusStop_snapNodes == 3 then return { 0, 5, }
					end
				else
					if params.lolloBusStop_snapNodes == 0 then return {}
					elseif params.lolloBusStop_snapNodes == 1 then return { 5, }
					elseif params.lolloBusStop_snapNodes == 2 then return { 0, }
					elseif params.lolloBusStop_snapNodes == 3 then return { 0, 5, }
					end
				end
				return {}
			end
			local function _getTramTrackType()
				return params.lolloBusStop_tramTrack == 0 and 'NO' or params.lolloBusStop_tramTrack == 1 and 'YES' or 'ELECTRIC'
			end
			local function _initParams()
				if params.lolloBusStop_snapNodes ~= 0 and params.lolloBusStop_snapNodes ~= 1 and params.lolloBusStop_snapNodes ~= 2 and params.lolloBusStop_snapNodes ~= 3 then
					params.lolloBusStop_snapNodes = 3
				end
				if params.lolloBusStop_direction ~= 0 and params.lolloBusStop_direction ~= 1 then params.lolloBusStop_direction = 1 end
				if not(params.lolloBusStop_streetType_) or not(two.globalStreetData[params.lolloBusStop_streetType_ + 1]) then
					params.lolloBusStop_streetType_ = moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData)
					logger.print('stopParametric.updateFn.script set params.lolloBusStop_streetType_ to') debugPrint(params.lolloBusStop_streetType_)
				else
					-- logger.print('stopParametric.updateFn.script params.lolloBusStop_streetType_ =', params.lolloBusStop_streetType_)
					-- logger.print('stopParametric.updateFn.script moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData) =', moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData))
				end
				-- logger.print('two.globalBusStopModelData =') logger.debugPrint(two.globalBusStopModelData)
				if not(params.lolloBusStop_model) or not(two.globalBusStopModelData[params.lolloBusStop_model + 1]) then
					params.lolloBusStop_model = 0
					logger.print('stopParametric.updateFn.script set params.lolloBusStop_model to') debugPrint(params.lolloBusStop_model)
				else
					logger.print('stopParametric.updateFn.script params.lolloBusStop_model =', params.lolloBusStop_model)
				end
			end
			_initParams()
			local _dyn = {}
			local function _readDynamiParams()
				_dyn.tan00 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan0X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan0Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan0Z', 'lolloBusStop_'),
				}
				_dyn.tan01 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan1X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan1Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge0Tan1Z', 'lolloBusStop_'),
				}
				_dyn.tan10 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan0X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan0Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan0Z', 'lolloBusStop_'),
				}
				_dyn.tan11 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan1X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan1Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge1Tan1Z', 'lolloBusStop_'),
				}
				_dyn.tan20 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan0X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan0Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan0Z', 'lolloBusStop_'),
				}
				_dyn.tan21 = {
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan1X', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan1Y', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'edge2Tan1Z', 'lolloBusStop_'),
				}
				_dyn.outerPos0 = {
					moduleHelpers.getFloatFromIntParams(params, 'outerNode0PosX', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'outerNode0PosY', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'outerNode0PosZ', 'lolloBusStop_'),
				}
				_dyn.outerPos1 = {
					moduleHelpers.getFloatFromIntParams(params, 'outerNode1PosX', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'outerNode1PosY', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'outerNode1PosZ', 'lolloBusStop_'),
				}
				_dyn.innerPos0 = {
					moduleHelpers.getFloatFromIntParams(params, 'innerNode0PosX', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'innerNode0PosY', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'innerNode0PosZ', 'lolloBusStop_'),
				}
				_dyn.innerPos1 = {
					moduleHelpers.getFloatFromIntParams(params, 'innerNode1PosX', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'innerNode1PosY', 'lolloBusStop_'),
					moduleHelpers.getFloatFromIntParams(params, 'innerNode1PosZ', 'lolloBusStop_'),
				}
				_dyn.pitchAngle = moduleHelpers.getFloatFromIntParams(params, 'pitchAngle', 'lolloBusStop_')
				_dyn.sidewalkHeight = moduleHelpers.getFloatFromIntParams(params, 'sidewalkHeight', 'lolloBusStop_')
			end
			_readDynamiParams()
			logger.print('stopParametric.updateFn _dyn =') logger.debugPrint(_dyn)

			local _selectedStreetData = two.globalStreetData[params.lolloBusStop_streetType_ + 1] or two.globalStreetData[1]
			-- logger.print('stopParametric.updateFn.script _selectedStreetData =') logger.debugPrint(_selectedStreetData)
			local _vehicleEdgeYOffset = params.lolloBusStop_driveOnLeft == 0
				and -_selectedStreetData.streetWidth * 0.5 +_selectedStreetData.rightLaneWidth * 0.5
				or _selectedStreetData.streetWidth * 0.5 -_selectedStreetData.rightLaneWidth * 0.5
			local _streetFileName = _selectedStreetData.fileName
            local _tramTrackType = _getTramTrackType()
			local _isBothSides = params.lolloBusStop_bothSides == 1 and _selectedStreetData.laneCount > 3 and not(_selectedStreetData.isOneWay)
			local _selectedModel = two.globalBusStopModelData[params.lolloBusStop_model + 1] or two.globalBusStopModelData[1]
			local _modelYOffset = params.lolloBusStop_driveOnLeft == 0
				and -_selectedStreetData.streetWidth * 0.5 -_selectedStreetData.sidewalkWidth * 0.5
				or _selectedStreetData.streetWidth * 0.5 +_selectedStreetData.sidewalkWidth * 0.5
			-- logger.print('stopParametric.updateFn.script _selectedModel =') logger.debugPrint(_selectedModel)
            local result = {
                colliders = {},
                cost = 1000,
                edgeLists = {
                    {
                        type = 'STREET',
                        params = {
                            hasBus = true, -- UG TODO broken
                            type = _streetFileName,
                            tramTrackType = _tramTrackType
                        },
                        edges = params.lolloBusStop_direction == 0
						and {
                            {
								_dyn.outerPos0,  _dyn.tan00
							},  -- node 0
                            {
								_dyn.innerPos0, _dyn.tan01
							},  -- node 1
                            {
								_dyn.innerPos0, _dyn.tan10
							},  -- node 2
                            {
								_dyn.innerPos1, _dyn.tan11
							},  -- node 3
                            {
								_dyn.innerPos1, _dyn.tan20
							},  -- node 4
                            {
								_dyn.outerPos1, _dyn.tan21
							},  -- node 5
                        } or {
                            {
								_dyn.outerPos1, _getInverseTan(_dyn.tan21)
							},  -- node 0
                            {
								_dyn.innerPos1, _getInverseTan(_dyn.tan20)
							},  -- node 1
                            {
								_dyn.innerPos1, _getInverseTan(_dyn.tan11)
							},  -- node 2
                            {
								_dyn.innerPos0, _getInverseTan(_dyn.tan10)
							},  -- node 3
                            {
								_dyn.innerPos0, _getInverseTan(_dyn.tan01)
							},  -- node 4
                            {
								_dyn.outerPos0,  _getInverseTan(_dyn.tan00)
							},  -- node 5
                        },
						freeNodes = getSnapNodes(), -- useless? LOLLO TODO try switching it on and off. It really seems useless
						snapNodes = getSnapNodes(),
                        -- tag2Nodes = {},
                    },
                },
				-- groundFaces = {},
				-- labelText = {},
				models = { },
				terrainAlignmentLists = { { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
					type = 'EQUAL',
					optional = true,
					faces =  { }
				} },
            }

			local _pitchTransf = transfUtilsUG.rotY(_dyn.pitchAngle)
			logger.print('stopParametric.updateFn.script _pitchTransf =') logger.debugPrint(_pitchTransf)
			-- _pitchTransf = constants.idTransf
			local modelTransfLeft = transfUtilsUG.mul(_pitchTransf, {-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, _modelYOffset, _dyn.sidewalkHeight, 1})
			local modelTransfRight = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -_modelYOffset, _dyn.sidewalkHeight, 1})
			result.models[#result.models+1] = {
				id = _selectedModel.fileName,
				-- tag = 'stationTag',
				transf = params.lolloBusStop_direction == 0
					and modelTransfLeft
					or modelTransfRight
			}
			if _isBothSides then
				result.models[#result.models+1] = {
					id = _selectedModel.fileName,
					-- tag = 'stationTag',
					transf = params.lolloBusStop_direction == 0
						and modelTransfRight
						or modelTransfLeft
				}
			end
-- LOLLO TEST CODE BEGIN
-- if true then
-- 	logger.print('stopParametric.updateFn.script result = ') logger.debugPrint(result)
-- 	logger.print('stopParametric.updateFn.script() ending')
-- 	return result
-- end
-- LOLLO TEST CODE END
			local vehicleEdgeTransfLeft = transfUtilsUG.mul(
				transfUtils.getTransf2FitObjectBetweenPositions(_dyn.innerPos0, _dyn.innerPos1, 2 * constants.innerEdgeX),
				{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _vehicleEdgeYOffset, 0, 1}
			)
			local vehicleEdgeTransfRight = transfUtilsUG.mul(
				transfUtils.getTransf2FitObjectBetweenPositions(_dyn.innerPos1, _dyn.innerPos0, 2 * constants.innerEdgeX),
				{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _vehicleEdgeYOffset, 0, 1}
			)
			result.models[#result.models+1] = {
				id = 'lollo_bus_stop/vehicle_edge_left.mdl',
				-- tag = 'stationTag',
				transf = params.lolloBusStop_direction == 0
					and vehicleEdgeTransfLeft
					or vehicleEdgeTransfRight
			}
			if _isBothSides then
				result.models[#result.models+1] = {
					id = 'lollo_bus_stop/vehicle_edge_left.mdl',
					-- tag = 'stationTag',
					transf = params.lolloBusStop_direction == 0
						and vehicleEdgeTransfRight
						or vehicleEdgeTransfLeft
				}
			end
-- LOLLO TEST CODE BEGIN
			result.models[#result.models+1] = {
				id = 'lollo_bus_stop/icon/blue.mdl',
				transf = {
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					_dyn.outerPos0[1], _dyn.outerPos0[2], _dyn.outerPos0[3], 1
				}
			}
-- LOLLO TEST CODE END

			-- LOLLO TEST CODE BEGIN
--[[
			local testVehicleEdgeTransfLeft = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _vehicleEdgeYOffset + 3.5, 0, 1})
			local testVehicleEdgeTransfRight = transfUtilsUG.mul(_pitchTransf, {-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, -_vehicleEdgeYOffset - 3.5, 0, 1})
			result.models[#result.models+1] = {
				-- id = 'lollo_bus_stop/vehicle_edge_left.mdl',
				id = 'lollo_bus_stop/icon/blue.mdl',
				-- tag = 'stationTag',
				transf = params.lolloBusStop_direction == 0
					and testVehicleEdgeTransfLeft
					or testVehicleEdgeTransfRight
			}
			if _isBothSides then
				result.models[#result.models+1] = {
					-- id = 'lollo_bus_stop/vehicle_edge_left.mdl',
					id = 'lollo_bus_stop/icon/blue.mdl',
					-- tag = 'stationTag',
					transf = params.lolloBusStop_direction == 0
						and testVehicleEdgeTransfRight
						or testVehicleEdgeTransfLeft
				}
			end
			result.models[#result.models+1] = {
				id = 'lollo_bus_stop/vehicle_edge_left.mdl',
				-- tag = 'stationTag',
				transf = params.lolloBusStop_direction == 0
					and testVehicleEdgeTransfLeft
					or testVehicleEdgeTransfRight
			}
			if _isBothSides then
				result.models[#result.models+1] = {
					id = 'lollo_bus_stop/vehicle_edge_left.mdl',
					-- tag = 'stationTag',
					transf = params.lolloBusStop_direction == 0
						and testVehicleEdgeTransfRight
						or testVehicleEdgeTransfLeft
				}
			end
]]
			-- LOLLO TEST CODE END

            -- join terminals together, similar to result.terminateConstructionHook that fires with modular stations
			local terminateConstructionHook = function()
				-- logger.print('starting terminateConstructionHook')
                local _extraCargoCapacity = 100

				if _isBothSides then
					result.stations = {
						{
							pool = { moreCapacity = _extraCargoCapacity * 2 },
							tag = 1, -- in the stock station, this is 0 for cargo and 1 for passengers
							terminals = { 0, 1 } -- 0 is the position of the linked terminal group, in base 0
						}
					}
					result.terminalGroups = {
						{
							tag = 0,
							terminals = {
								{ 2, 0 },
							},
							-- vehicleNodeOverride = 2 -- this lands on the pavement, so you cannot use it
						},
						{
							tag = 1,
							terminals = {
								{ 3, 0 },
							},
							-- vehicleNodeOverride = 2 -- this lands on the pavement, so you cannot use it
						},
					}
				else
					result.stations = {
						{
							pool = { moreCapacity = _extraCargoCapacity },
							tag = 1, -- in the stock station, this is 0 for cargo and 1 for passengers
							terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
						}
					}
					result.terminalGroups = {
						{
							tag = 0,
							terminals = {
								{ 1, 0 }
							},
							-- vehicleNodeOverride = 2 -- this lands on the pavement, so you cannot use it
						}
					}
				end

				-- avoid dump when configuring
				if #(result.stations[1].terminals) == 0 then
					table.insert(result.stations[1].terminals, 0)
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep them all different tho
				-- 		terminals = {
				-- 			{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 			{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				-- logger.print('leaving terminateConstructionHook')
				-- logger.print('result.models = ') logger.debugPrint(result.models)
				-- logger.print('result.stations = ') logger.debugPrint(result.stations)
				-- logger.print('result.terminalGroups = ') logger.debugPrint(result.terminalGroups)
			end
            terminateConstructionHook()

			logger.print('stopParametric.updateFn.script result = ') logger.debugPrint(result)
			logger.print('stopParametric.updateFn.script() ending')
			return result
		end,
--[[  	
		-- useless	
		preProcessFn = function(modules, change, three)
			-- this fires when the user adds or removes a module
			logger.print('preProcessFn starting')
			-- print('modules =')
			-- debugPrint(modules)
			-- print('change =')
			-- debugPrint(change)
			-- default behaviour
			if change.added then
				modules[change.slotId] = change.module
			else
				modules[change.slotId] = nil
			end
			-- airport behaviour
			-- if change.added then
			-- 	if change.slotId == landingSlotId + 1 then
			-- 		modules[landingSlotId + 0] = nil
			-- 	elseif change.slotId == landingSlotId + 0 then
			-- 		modules[landingSlotId + 1] = nil
			-- 	elseif change.slotId == landingSlotId + 2 then
			-- 		modules[landingSlotId + 3] = nil
			-- 	elseif change.slotId == landingSlotId + 3 then
			-- 		modules[landingSlotId + 2] = nil
			-- 	end
			-- 	modules[change.slotId] = change.module
			-- else
			-- 	modules[change.slotId] = nil
			-- end
			return modules
        end,
]]
 		-- useless
		upgradeFn = function(one, two)
			logger.print('upgradeFn.script starting, one =') logger.debugPrint(one)
			logger.print('upgradeFn.script two =') logger.debugPrint(two)
			return {}
        end,
	}
end
