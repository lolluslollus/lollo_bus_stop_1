local arrayUtils = require('lollo_bus_stop.arrayUtils')
local constants = require('lollo_bus_stop.constants')
local logger = require('lollo_bus_stop.logger')
local moduleHelpers = require('lollo_bus_stop.moduleHelpers')
local pitchHelpers = require('lollo_bus_stop.pitchHelper')

-- LOLLO TODO try putting down this after the outer splits,
-- check out the Proposal (not the SimpleProposal)
-- and try to imitate it.
-- Better even, put down a normal bus stop,
-- check out the Proposal (not the SimpleProposal)
-- and try to copy it with more capacity
-- Sadly, this is the first thing I tried and it won't work:
-- there are no station or capacity entries in the proposal.
function data()
	-- logger.print('old con, params are set =')
	-- logger.debugPrint(moduleHelpers.getParams())
	return {
		type = 'STREET_STATION',
		description = {
			name = _('simple busStopName'),
			description = _('busStopDesc'),
		},
		availability = {
			yearFrom = -1,
			yearTo = -1,
		},
		order = 5005,
		-- soundConfig = {
		-- 	soundSet = { name = 'lollo_lorry_bay' }
		-- },
		autoRemovable = false,
		-- snapping = { -- useless
		-- 	rail = true,
		-- 	road = true,
		-- 	water = false
		-- },
		skipCollision = true, -- we need this to change the street type when reconfiguring
        params = moduleHelpers.getParams(),
        updateFn = function(params)
			logger.print('simple.con supdateFn.script() starting, params =') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}))
			local function _getTramTrackType()
				return params.lolloBusStop_tramTrack == 0 and 'NO' or params.lolloBusStop_tramTrack == 1 and 'YES' or 'ELECTRIC'
			end
			local function _initParams()
				if params.lolloBusStop_snapNodes ~= 0 and params.lolloBusStop_snapNodes ~= 1 and params.lolloBusStop_snapNodes ~= 2 and params.lolloBusStop_snapNodes ~= 3 then
					params.lolloBusStop_snapNodes = 3
				end
				if params.lolloBusStop_direction ~= 0 and params.lolloBusStop_direction ~= 1 then params.lolloBusStop_direction = 1 end
			end
			_initParams()

			local _pitchAngle = pitchHelpers.getPitchAngle(params)
			local _selectedStreetData = {
                fileName = 'standard/town_medium_new.lua',
                streetWidth = 8,
                sidewalkWidth = 4,
                rightLaneWidth = 4,
                laneCount = 4,
                isOneWay = false,
            }
			logger.print('updateFn.script _selectedStreetData =') logger.debugPrint(_selectedStreetData)
			local _streetFileName = _selectedStreetData.fileName
            local _tramTrackType = _getTramTrackType()
			local _selectedModel = {
                fileName = 'station/bus/small_mid.mdl'
            }
			logger.print('updateFn.script _selectedModel =') logger.debugPrint(_selectedModel)
            local result = {
                colliders = {},
                cost = 1000,
                edgeLists = {
                    {
                        type = 'STREET',
                        params = {
                            hasBus = true, -- UG TODO broken
                            type = _streetFileName,
                            tramTrackType = _tramTrackType
                        },
                        edges = params.lolloBusStop_direction == 0
						and {
                            {
								pitchHelpers.getXYZPitched(_pitchAngle, { -constants.outerEdgeXCon, 0, 0 }),
                                { 2 * constants.outerEdgeXCon, 0, 0 }
							},  -- node 0
                            {
								pitchHelpers.getXYZPitched(_pitchAngle, { constants.outerEdgeXCon, 0, 0 }),
                                { 2 * constants.outerEdgeXCon, 0, 0 }
							},  -- node 1
                        } or {
                            {
								pitchHelpers.getXYZPitched(_pitchAngle, { constants.outerEdgeXCon, 0, 0 }),
                                { -2 * constants.outerEdgeXCon, 0, 0 }
							},  -- node 0
                            {
								pitchHelpers.getXYZPitched(_pitchAngle, { -constants.outerEdgeXCon, 0, 0 }),
                                { -2 * constants.outerEdgeXCon, 0, 0 }
							},  -- node 1
                        },
						freeNodes = {0, 1}, -- useless?
						snapNodes = {0, 1},
                        -- tag2Nodes = {},
                    },
                },
                edgeObjects = {
                    edge = 0,
                    param = 0.5,
                    left = false,
                    model = _selectedModel.fileName,
                },
				-- groundFaces = {},
				-- labelText = {},
				models = { },
				terrainAlignmentLists = { { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
					type = 'EQUAL',
					optional = true,
					faces =  { }
				} },
            }

			-- logger.print('updateFn.script result = ') logger.debugPrint(result)
			logger.print('simple.con updateFn.script() ending')
			return result
		end,

		-- this can be overwritten by the .script file, it is useless anyway
		upgradeFn = function(one, two)
			logger.print('simple.con upgradeFn starting, one =') logger.debugPrint(one)
			logger.print('two =') logger.debugPrint(two)
			return {}
        end,
	}
end
